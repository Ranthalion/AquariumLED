var redis = require('redis');

var DAL = function(){
	this.client = redis.createClient();
}

DAL.prototype.getCurrentSetting = function(callback){
	this.client.get('currentChannelSettings', function(err, reply){
		if (err)
			callback(err);
			
		console.log('Retrieving settings.');
		console.log(reply);
		settings = JSON.parse(reply);
		if (!(settings instanceof Array))
			callback('Invalid data');
		//TODO: Make sure settings is an accurate representation
		if (callback)
			callback(err, settings);
	});
};

DAL.prototype.saveMode = function(mode){
	if (mode == 'direct' || mode == 'schedule'){
		this.client.set('currentMode', mode);
	}
	else{
		throw new Error('Invalid mode received: ' + mode + '.');
	}
};

DAL.prototype.getCurrentMode = function(callback){
	this.client.get('currentMode', function(err, reply){
		if (err)
			callback(err);
		console.log('getCurrentMode: ' + reply);
		//default to direct
		if (reply != 'direct' && reply != 'schedule'){
			reply = 'direct';
		}
		
		if (callback)
			callback(err, reply);
	});
};


DAL.prototype.saveCurrentSetting = function(settings){
	if (settings instanceof Array){
		console.log('Saving...');
		console.log(JSON.stringify(settings));
		this.client.set('currentChannelSettings', JSON.stringify(settings));
	}
	else{
		throw new Error('Invalid Settings received');
	}
};

DAL.prototype.saveSchedule = function(schedule){
	if (schedule instanceof Array){
		this.client.set('currentSchedule', JSON.stringify(schedule));
	}
	else{
		throw new Error('Invalid schedule received.');
	}
}

DAL.prototype.getSchedule = function(callback){
	this.client.get('currentSchedule', function(err, reply){
		if (err)
			callback(err);
			
		schedule = JSON.parse(reply);
		if (callback)
			callback(err, schedule);
	});
}

DAL.prototype.quit = function(){
	this.client.quit();
}

module.exports=DAL;